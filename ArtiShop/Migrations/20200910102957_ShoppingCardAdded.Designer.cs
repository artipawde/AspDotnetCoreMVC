// <auto-generated />
using System;
using ArtiShop.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ArtiShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200910102957_ShoppingCardAdded")]
    partial class ShoppingCardAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtiShop.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Fruit Cakes",
                            Descripation = "All Cheese pie"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Chocolate Cakes",
                            Descripation = "All Chocolate pie"
                        });
                });

            modelBuilder.Entity("ArtiShop.Models.Pie", b =>
                {
                    b.Property<int>("PieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllergyInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPieOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PieId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Pies");

                    b.HasData(
                        new
                        {
                            PieId = 1,
                            CategoryId = 1,
                            ImageThumbnailUrl = "/Image/fruitcake1.jfif",
                            ImageUrl = "/Image/fruitcake1.jfif",
                            InStock = true,
                            IsPieOfTheWeek = true,
                            LongDescription = "A fruitcake is a cake that contains raisins, currants, and other dried fruit. 2. countable noun. If you refer to someone as a fruitcake, you mean that they are crazy or that their behavior is very strange.",
                            Name = "Fruit Cake",
                            Price = 520.50m,
                            ShortDescription = "Only Fruits"
                        },
                        new
                        {
                            PieId = 2,
                            CategoryId = 2,
                            ImageThumbnailUrl = "/Image/French Silk Pie.png",
                            ImageUrl = "/Image/French Silk Pie.png",
                            InStock = true,
                            IsPieOfTheWeek = false,
                            LongDescription = "Pudding, or in this case, chocolate pie filling, only requires a few ingredients to make. We start with sugar, egg yolks (you can save the whites for an Angel Food cake or Funfetti cake!), cornstarch (to help firm up the chocolate pie and make it sliceable rather than soupy!), salt, milk, and heavy cream.",
                            Name = "Chocolate Pie",
                            Price = 240.50m,
                            ShortDescription = "Only Cheese"
                        });
                });

            modelBuilder.Entity("ArtiShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("PieId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("PieId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("ArtiShop.Models.Pie", b =>
                {
                    b.HasOne("ArtiShop.Models.Category", "Category")
                        .WithMany("Pies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtiShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("ArtiShop.Models.Pie", "Pie")
                        .WithMany()
                        .HasForeignKey("PieId");
                });
#pragma warning restore 612, 618
        }
    }
}
